// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    field Array string_array;
    field int index,array_len;
    constructor String new(int maxLength) {
        let string_array = Array.new(maxLength+1);
        let index = 0;
        let array_len = maxLength + 1;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do string_array.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return index;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return string_array[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let string_array[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (index<array_len){
            let string_array[index] = c;
            let index = index + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let index = index - 1;
        let string_array[index] = 0;

        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i,cur_dig,acc;
        var boolean neg;
        let i = 0;
        if (string_array[i]=45){let neg = true; let i = i+1;}
        let cur_dig = string_array[i]-48;
        let acc = cur_dig;
        if(length()>1)
            {let i = i + 1;}
        while((string_array[i]>47) & (string_array[i]<58) & (i<length())) {

            let cur_dig = string_array[i]-48;
            let i = i + 1;
            let acc = 10*acc + cur_dig;
        }
        if(neg){
            return -acc;}
        else{
            return acc;
        }
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        
        let index = 0;

        if(val < 0){
            let val = -val;
            do appendChar(45);  // append '-' before numbers
        }


        do set_int_routine(val);
        return;

    }

    method void set_int_routine(int num){
        var int remainder,x;

        let x = num/10;
        let remainder = num - (x*10);

        if (num<10){
            do appendChar(remainder + 48);
        }
        else{
            do set_int_routine(x);
            do appendChar(remainder + 48);
        }
        return;
    }
    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
