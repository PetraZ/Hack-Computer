// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean cur_color;
    static Array screen,bit_masks;
    /** Initializes the Screen. */
    function void init() {
        let cur_color = true;
        let screen = 16384;

        let bit_masks = Array.new(16);
        let bit_masks[0]  = 1;
        let bit_masks[1]  = 2;
        let bit_masks[2]  = 4;
        let bit_masks[3]  = 8;
        let bit_masks[4]  = 16;
        let bit_masks[5]  = 32;
        let bit_masks[6]  = 64;
        let bit_masks[7]  = 128;
        let bit_masks[8]  = 256;
        let bit_masks[9]  = 512;
        let bit_masks[10] = 1024;
        let bit_masks[11] = 2048;
        let bit_masks[12] = 4096;
        let bit_masks[13] = 8192;
        let bit_masks[14] = 16384;
        let bit_masks[15] = 16384 + 16384;
        return;
    }
    /** Erases the entire screen. */
    function void clearScreen() {
        var int i ;
        let i = 0;
    while (i < 8192){
            let screen[i] = false;
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let cur_color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address,value,remainder;
        let address = 16384 + (32*y) + (x/16);
        let value = Memory.peek(address);
        let remainder = bit_masks[x - (x/16*16)];
        
        if (cur_color){
            let value = value | remainder;
            do Memory.poke(address,value);}
        else {
            let value = value & ~remainder;
            do Memory.poke(address,value);}
        
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */

    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a,b,diff,dx,dy;

        let a = 0;
        let b = 0;
        let diff = 0;
        let dx = x2 - x1;
        let dy = y2 - y1;

        if (x1 = x2){
            if (y2<y1){do Screen.drawLine(x1,y2,x1,y1);}
            else{
            while ((y1+b)<y2){
                do Screen.drawPixel(x1,y1+b);
                let b = b+1; }
            }
            return;
        }

        if (y1 = y2){
            if (x2<x1){do Screen.drawLine(x2,y1,x1,y1);}
            else{
                while((x1+a)<x2){
                    do Screen.drawPixel(x1+a,y1);
                    let a = a+1;
                }

            }
            return;
        }


        if(x1>x2) {do Screen.drawLine(x2,y2,x1,y1);}
        else {
            if (y1<y2){ 
                while (((x1+a)<x2)&((y1+b)<y2)){
                    do Screen.drawPixel(x1+a,y1+b);
                    // diff = bx - ay; initialized to be 0
                    if (diff < 0) {
                        let b = b + 1;
                        let diff = diff + dx;
                    }
                    else{
                        let a = a + 1;
                        let diff = diff - dy;  
                    }
                }
            }
            else{
                while(((x1+a)<x2)&((y1+b)>y2)){
                    do Screen.drawPixel(x1+a,y1+b);
                    // diff = bdx - ady
                    if(diff>0){
                        let b = b - 1;
                        let diff = diff - dx;
                    }
                    else{
                        let a = a + 1;
                        let diff = diff - dy;
                    }
                }
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int a,b;
        if ((x1 < 0) | (x1 > 511) | (y1 < 0) | (y1 > 255) |
        (x2 < 0) | (x2 > 511) | (y2 < 0) | (y2 > 255)|(x1 > x2)|
        (y1 > y2)) 
        {do Sys.error(3); }

        let a = 0;
        let b = 0;

        while((y1+b)<y2){
            while((x1+a)<x2){
                do Screen.drawPixel(x1+a,y1+b);
                let a = a + 1;
            }
            let b = b + 1;
            let a = 0;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int acc,x1,x2,cy,sqrt,dy;

        if ((r<0) | ((x-r)<0) | ((x-r)>511) | ((y-r)<0) | ((y+r)>255))
        {do Sys.error(3);}

        let dy = -r;
        while(~(dy=r)){
            let sqrt = Math.sqrt((r*r)-(dy*dy));

            let x1 = x - sqrt;
            let x2 = x + sqrt;
            let cy = y + dy;

            do Screen.drawLine(x1,cy,x2,cy);
            let dy = dy + 1;     
        }
        return;
    }


    }

