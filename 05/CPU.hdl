// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

Mux16(a=instruction,b=aluout,sel=instruction[15],out=inaregister);
ARegister(in=inaregister,out=outaregister,load=loada,out[0..14]=addressM);
And(a=instruction[15],b=instruction[5],out=loada1);
Not(in=instruction[15],out=loada2);
Or(a=loada1,b=loada2,out=loada);

Mux16(a=outaregister,b=inM,sel=instruction[12],out=ALUy);
DRegister(in=aluout,out=Dout,load=loadd);
And(a=instruction[15],b=instruction[4],out=loadd);

ALU(x=Dout,y=ALUy,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=aluout,out=outM,zr=zr,ng=ng);

And(a=instruction[15],b=instruction[3],out=writeM);

PC(reset=reset,load=loadpc,inc=true,in=outaregister,out[0..14]=pc);

Not(in=instruction[2],out=notj1);
And(a=instruction[15],b=notj1,out=out21); //59
Not(in=instruction[1],out=notj2);
And(a=notj2,b=instruction[0],out=out22);
Or(a=zr,b=ng,out=notout23);
Not(in=notout23,out=out23);
And(a=out21,b=out22,out=out2122);
And(a=out2122,b=out23,out=out2);    //67

Not(in=instruction[0],out=notj3);
And(a=notj1,b=instruction[15],out=out31);
And(a=instruction[1],b=notj3,out=out32);
Not(in=ng,out=nng);
And(a=nng,b=zr,out=out33);
And(a=out31,b=out32,out=out3132);
And(a=out3132,b=out33,out=out3);

And(a=notj1,b=instruction[15],out=out41);
And(a=instruction[1],b=instruction[0],out=out42);
And(a=out41,b=out42,out=out4142);  //77
And(a=out4142,b=nng,out=out4);

And(a=instruction[2],b=instruction[15],out=out51);
And(a=notj2,b=notj3,out=out52);
And(a=out51,b=out52,out=out5152);
And(a=out5152,b=ng,out=out5);

And(a=instruction[15],b=instruction[2],out=out61);
And(a=notj2,b=instruction[0],out=out62); //86
And(a=out61,b=out62,out=out6162);
Not(in=zr,out=notzr);
And(a=out6162,b=notzr,out=out6);

And(a=instruction[15],b=instruction[2],out=out71);
And(a=instruction[1],b=notj3,out=out72);
Or(a=zr,b=ng,out=out73);
And(a=out71,b=out72,out=out7172);
And(a=out7172,b=out73,out=out7);

And(a=instruction[15],b=instruction[2],out=out81);
And(a=instruction[1],b=instruction[0],out=out82);
And(a=out81,b=out82,out=out8);

Or8Way(in[0]=false,in[1]=out2,in[2]=out3,in[3]=out4,in[4]=out5,in[5]=out6,in[6]=out7,in[7]=out8,out=loadpc);






}